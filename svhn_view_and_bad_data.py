import h5pyimport osimport cv2import pandas as pddef get_attrs(digit_struct_mat_file, index):    """    Returns a dictionary which contains keys: label, left, top, width and height, each key has multiple values.    """    attrs = {}    f = digit_struct_mat_file    item = f['digitStruct']['bbox'][index].item()    for key in ['label', 'left', 'top', 'width', 'height']:        attr = f[item][key]        values = [f[attr.value[k].item()].value[0][0]                  for k in range(len(attr))] if len(attr) > 1 else [attr.value[0][0]]        attrs[key] = values    return attrs# a 27% hit rate on bad data for multiple numbers. less for single numbers.traindata_bad_list = [37, 211, 344, 362, 505, 939, 964, 1202, 1266, 1480, 1845, 2141, 2191,                      2219, 2565, 2784, 2993, 3218, 3280, 3288, 3362, 3398, 3443, 3495, 3725,                      3897, 3945, 4491, 5024, 5169, 5293, 5515, 5749, 6732, 7220, 7600, 7965,                      8025, 8932, 9018, 9130, 9692, 9973, 10875, 10906, 11292, 11358, 11453,                      11649, 11824, 11911, 12077, 12565, 12687, 12990, 13113, 13326, 13714,                      14091, 14104, 14191, 14220, 15002, 15875, 16117, 16353, 16363, 16638,                      16664, 16691, 17009, 17195, 17966, 18087, 18375, 19446, 19559, 19832,                      20110, 20242, 20269, 20527, 20664, 20924, 21276, 21338, 21536, 21610,                      21686, 21968, 22141, 22218, 22355, 22702, 22808, 23207, 23356, 23523,                      23536, 23573, 23615, 23640, 23742, 23751, 23951, 24442, 24693, 24695,                      25145, 25514, 25562, 25860, 25929, 26058, 26679, 26785, 27053, 27227,                      27237, 27563, 27586, 27787, 27887, 27969, 28299, 28407, 28758, 29053,                      29240, 29542, 29543, 29637, 28755, 29804, 30167, 30301, 30318, 30469,                      30887, 30954, 31385, 31536, 31925, 32014, 32334, 32569, 32757, 33026]extradata_bad_list = [104, 133, 1499, 1904, 2062, 3108, 3349, 4008, 4807, 5355, 6382, 6571,                      7287, 7313, 7347, 7502, 8672, 8933, 9357, 9427, 10499, 10661, 11242,                      11349, 11542, 11561, 11698, 11954, 11960, 12335, 13374, 13457, 16428,                      16618, 16729, 16891, 17791, 17887, 17984, 18144, 18492, 18865, 19054,                      20095, 20321, 21284, 21308, 22088, 22173, 22216, 22735, 22858, 23264,                      24034, 24109, 25337, 25654, 25780, 25839, 26682, 27764, 28536, 29076,                      29904, 29950, 30290, 30392, 30608, 32549, 33223, 33228, 34648, 35339,                      35473, 35634, 38331, 39046, 39051, 39086, 39363, 40232, 40269, 40346,                      40732, 41075, 42876, 44476, 44557, 44857, 45327, 45986, 45993, 46076,                      46414, 47093, 47297, 47769, 48414, 49246, 49515, 49696, 50626, 51789,                      51926, 52049, 52161, 52223, 53380, 54300, 54496, 54575, 55049, 55725,                      55847, 55861, 56143, 56162, 56437, 56546, 57004, 57018, 57316, 57638,                      58348, 59082, 59176, 60107, 60173, 60328, 60361, 60859, 62409, 62516,                      62885, 63629, 63645, 64030, 64086, 64632, 64810, 65101, 65217, 65884,                      66145, 66467, 66612, 67042, 67810, 67888, 68374, 68381, 68513, 68600,                      68646, 69399, 69679, 70462, 70729, 71041, 71630, 71318, 72424, 72621,                      74078, 74586, 74633, 74719, 74951, 75069, 75115, 75346, 76621, 76872,                      77241, 77746, 78013, 78682, 79018, 79106, 79289, 79547, 79742, 80247,                      81773, 82250, 82793, 82899, 82964, 83466, 83497, 83817, 84231, 84567,                      84924, 85608, 85829, 85945, 85996, 87237, 87276, 88813, 88943, 89351,                      89373, 90285, 90308, 90783, 91309, 91402, 91527, 91803, 91869, 91905,                      93762, 94159, 94630, 95015, 95479, 95600, 95919, 96818, 96949, 97348,                      97379, 97658, 98430, 98787, 99097, 99881, 100432, 100605, 100960, 101687,                      102616, 102706, 103227, 103388, 103877, 104187, 104255, 105355, 105669,                      105970, 107057, 107492, 107568, 107569, 107703, 107880, 107975, 108588,                      108679, 108801, 109867, 110425, 110470, 110735, 111627, 111631, 112269,                      113137, 113183, 113539, 114733, 114796, 115119, 115931, 116202, 116411,                      116794, 116897, 116907, 117819, 117920, 118029, 119248, 119465, 119565,                      120169, 120194, 120325, 120750, 120917, 121141, 121380, 124144, 124535,                      124640, 125514, 125627, 125681, 125964, 126310, 126878, 127594, 127954,                      128099, 128423, 128756, 129322, 132291, 132814, 134469, 134514, 135209,                      135237, 136946, 136997, 137132, 138294, 138332, 138980, 139463, 139863,                      139929, 140117, 140700, 140749, 140881, 141181, 142407, 142880, 143153,                      143723, 143812, 144814, 145203, 146266, 147215, 147461, 147905, 148436,                      149332, 150303, 151060, 151257, 152512, 152789, 153405, 153781, 155307,                      155800, 155954, 156673, 158481, 159902, 160705, 160721, 160723, 160860,                      161268, 161499, 161800, 162059, 162644, 163037, 163163, 163707, 163799,                      164935, 165235, 165293, 166271, 166588, 167183, 167372, 167493, 167690,                      167728, 167781, 168814, 169129, 169757, 170272, 171724, 171978, 172297,                      172959, 173204, 173821, 174206, 174207, 174552, 175294, 175460, 175802,                      176048, 176444, 176962, 177359, 177542, 177965, 178321, 178457, 180001,                      181723, 182347, 182676, 182720, 182830, 183527, 183735, 183857, 184817,                      185034, 186147, 186264, 186331, 186678, 187021, 187750, 188030, 188324,                      188427, 188938, 189897, 190122, 190175, 190699, 191310, 191333, 191437,                      191582, 192106, 192527, 192789, 193627, 194240, 194312, 194989, 195073,                      195681, 196410, 197286, 197595, 197659, 198414, 198794, 199692, 200057,                      200126, 200855, 201138, 201663, 201823, 201840]testdata_bad_list = [1731, 1928, 2702, 2804, 3439, 3568, 3861, 4000, 4926, 5682, 6085, 6930,                     8163, 8796, 9625, 10080, 10299, 11330, 11901, 12788, 12899]data_files = ['train', 'extra', 'test']the_data = []train_bad_data = []extra_bad_data = []test_bad_data = []for data_file in data_files:    print(data_file)    path_to_dir = 'raw_data/' + data_file    path_to_digit_struct_mat_file = os.path.join(path_to_dir, 'digitStruct.mat')    # Which list of bad files are we looking at    if data_file == 'train':        bad_list = traindata_bad_list        # print(len(bad_list))    elif data_file == 'extra':        bad_list = extradata_bad_list        # print(len(bad_list))    else:        bad_list = testdata_bad_list    for i in bad_list:        path_to_image_file = os.path.join(path_to_dir, str(i)+'.png')        index = int(path_to_image_file.split('/')[-1].split('.')[0]) - 1        with h5py.File(path_to_digit_struct_mat_file, 'r') as digit_struct_mat_file:            attrs = get_attrs(digit_struct_mat_file, index)            num_digits = len(attrs['label'])            if num_digits > 1:                reason = "Skipped digit that will be included during pre-processing or included a non-existent digit"            else:                reason = "Single bounding box contains multiple or incorrect digits"            the_data.append([data_file + '_data', str(i)+'.png', str(reason), str(attrs)])            # print('index %d: %s' % (index, path_to_image_file))            # print(path_to_digit_struct_mat_file)            # print(attrs)            # print(i)            # img = cv2.imread(path_to_image_file)            # digits = len(attrs['label'])            # for j in range(digits):            #     cv2.rectangle(img, (int(attrs['left'][j]), int(attrs['top'][j])),            #                   (int(attrs['left'][j] + attrs['width'][j]), int(attrs['top'][j] + attrs['height'][j])),            #                   (0, 0, 255), 1)            # cv2.imshow('sl', img)            # cv2.waitKey(0)df = pd.DataFrame(the_data, columns=['DataSet', 'PhotoName', 'Removal Reason', 'Data Label'])# Disarm when not writing# df.to_csv('raw_data/removed_data.csv', index=False)df_train = pd.DataFrame(traindata_bad_list, columns=['Bad Data From Training Set (Photo #)'])df_extra = pd.DataFrame(extradata_bad_list, columns=['Bad Data From Extra Set (Photo #)'])df_test = pd.DataFrame(testdata_bad_list, columns=['Bad Data From Test Set (Photo #)'])# Disarm when not writing# df_train.to_csv('raw_data/bad_train_data.csv', index=False)# df_extra.to_csv('raw_data/bad_extra_data.csv', index=False)# df_test.to_csv('raw_data/bad_test_data.csv', index=False)